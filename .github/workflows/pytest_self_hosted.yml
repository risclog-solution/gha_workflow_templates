name: Test

on:
  workflow_call:
    inputs:
      versions:
        default: >-
            ["3.9",]
        required: false
        type: string
      timeout_minutes:
        default: 10
        required: false
        type: number
      test_command:
        default: "bin/py.test"
        required: false
        type: string
      cache_hashfile:
        default: ""
        required: false
        type: string
      additional_installs:
        default: ""
        required: false
        type: string
      buildout_file:
        default: "buildout.cfg"
        required: false
        type: string
      debug_before_buildout:
        default: false
        required: false
        type: boolean
      debug_after_buildout:
        default: false
        required: false
        type: boolean

env:
  FORCE_COLOR: "1"  # Make tools pretty.
  PYTHONUNBUFFERED: 1

jobs:
  test:
    runs-on: self-hosted
    timeout-minutes: ${{ inputs.timeout_minutes }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{fromJson(inputs.versions)}}
    steps:
    - uses: AutoModality/action-clean@v1
    - uses: actions/checkout@v3
    - name: Add claimx directories
      run: |
        rm -rf /u01/app/*
        mkdir -p /u01/app/claimx/log/
        mkdir -p /u01/app/claimx/job/
        mkdir -p /u01/app/claimx/temp/
        mkdir -p /u01/app/claimx/import/importfiles/wsgi/
    - name: Setup PostgreSQL environment
      run: |
        echo "localhost:5432:*:postgres:P0sTGrE5*Pa55W0rt!" > ~/.pgpass
        echo "localhost:5432:*:github-runner-${{ runner.name }}:R4nneR*Pa55W0rt!" >> ~/.pgpass
        chmod 0600 ~/.pgpass
    - name: Clean up eggs and filestorage dir
      run: |
        cd $GITHUB_WORKSPACE
        rm -rf eggs/
        rm -rf var/
    - name: Install dependencies
      run: |
        cd $GITHUB_WORKSPACE
        virtualenv --python=python${{ matrix.python-version }} venv
        venv/bin/pip install setuptools==44.0.0
        venv/bin/pip install zc.buildout==2.13.8
        ${{ inputs.additional_installs }}
        venv/bin/buildout -c ${{ inputs.buildout_file }}
    - name: Test with pytest
      id: tests
      run: |
        bin/test --junit-xml pytest.xml
      env:
        CI_TEST_RUN: 1
        POSTGRES_HOST: localhost
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: P0sTGrE5*Pa55W0rt!
        DISPLAY: :0
    - name: Upload coverage RAW data
      uses: actions/upload-artifact@v3
      with:
        name: coverage-data
        path: ".coverage*"
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: pytest.xml
    - name: Upload Test Artifacts
      if: ${{ failure() && steps.tests.conclusion == 'failure' }}
      uses: actions/upload-artifact@v3
      with:
        name: test-failures
        path: |
          /tmp/source_*.html
          /tmp/screenshot_*.png
          /tmp/selenium_browser_log_*.txt
